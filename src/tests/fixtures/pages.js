const pages = [
  {
    id: 'uhrjbmf8xqz3',
    createdAt: '2021-05-14T15:35:54.551Z',
    updatedAt: '2021-05-14T15:36:09.951Z',
    publishedAt: '2021-05-14T15:36:09.951Z',
    revisedAt: '2021-05-14T15:36:09.951Z',
    title: 'Reactをwebpackでセットアップする。',
    body:
      '<h2 id="h098000ada2"><strong style="color:#bf9eee;background-color:#ffffff">setup</strong></h2><p><br></p><pre><code>❯ yarn init\nyarn init v1.22.10\nwarning ..&#x2F;package.json: No license field\nquestion name (react-blog-built-in-microCMS):\nquestion version (1.0.0):\nquestion description: microCMS\nquestion entry point (index.js): app.js\nquestion repository url (git@github.com:blackraccoon000&#x2F;react-blog-built-in-microCMS.git):\nquestion author (Yutaka Fujii &lt;yutakaf@playwell.site&gt;):\nquestion license (MIT): BSD 3-Clause License\nquestion private: public</code></pre><p><br></p><h3 id="h58ad52ed07"><strong style="color:#bf9eee">react</strong></h3><p><br>react 解釈に必要<br><br><code>yarn add react react-dom</code><br><code>yarn add @babel&#x2F;preset-react @babel&#x2F;preset-env</code><br></p><h3 id="h0123682dfe"><strong style="color:#bf9eee;background-color:#ffffff">webpack</strong></h3><p><br>webpack 経由で react をコンパイルするのに必要<br><br><code>yarn add webpack webpack-cli webpack-merge</code><br><code>yarn add html-webpack-plugin</code><br></p><h3 id="h55be5dbc4c"><strong style="color:#bf9eee;background-color:#ffffff">babel</strong></h3><p><br>ES6 などで追加された新規記法の解釈に必要<br><br><code>yarn add @babel&#x2F;core @babel&#x2F;plugin-proposal-class-properties @babel&#x2F;plugin-proposal-object-rest-spread</code><br></p><h3 id="ha1956e92b0"><strong style="color:#bf9eee">loader</strong></h3><p><br>webpack で babel や style などを解釈するのに必要<br><br><code>yarn add babel-loader style-loader sass sass-loader</code><br></p><h3 id="h70ce4fea77"><strong style="color:#bf9eee">plugin</strong></h3><p><br><code>yarn add babel-plugin-styled-components babel-plugin-transform-class-properties babel-plugin-transform-object-rest-spread</code><br></p><h3 id="h10aeb713eb"><strong style="color:#bf9eee">styled-component</strong></h3><p><br><code>yarn add styled-reset styled-components</code><br></p><h3 id="h86c20efef7"><strong style="color:#bf9eee">webpack.config.js</strong></h3><p><br>development と production で分岐するように webpack を生成<br></p><pre><code>webpack.config.js; &#x2F;&#x2F; 発生元\nwebpack.common.js; &#x2F;&#x2F; 共通\nwebpack.dev.js; &#x2F;&#x2F; 開発\nwebpack.prod.js; &#x2F;&#x2F; 本番</code></pre><p><br><code>path.join</code>から<code>path.resolve</code>へ変更したので、windows だと動かないかも？<br></p><h3 id="h13099e0679"><strong style="color:#bf9eee;background-color:#ffffff">.babelrc</strong></h3><p><br><code>corejs 3</code>で <code>plugins</code> を設定<br></p><h3 id="hee074fdd83"><strong style="color:#bf9eee">live-server</strong></h3><p><br><code>yarn -D live-server</code><br></p><h3 id="h29f3c629a7"><strong style="color:#bf9eee;background-color:#ffffff">src&#x2F;app.js</strong></h3><p><br></p><pre><code>import React from &#x27;react&#x27;;\nimport ReactDOM from &#x27;react-dom&#x27;;\n\nconst jsx = (\n  &lt;div&gt;\n    &lt;h1&gt;Hello World&lt;&#x2F;h1&gt;\n  &lt;&#x2F;div&gt;\n);\n\nReactDOM.render(jsx, document.getElementById(&#x27;app&#x27;));</code></pre><p><br></p><h3 id="h1d1f2f552d"><strong style="color:#bf9eee;background-color:#ffffff">環境作成テスト</strong></h3><p><br><code>app.js</code> を <code>public&#x2F;dist&#x2F;bundle.js</code> に変換<br><br>開発 →<code>live-server</code><br>・トランスパイル<br><code>npx webpack --env development</code><br>・Webサーバー起動<br><code>npx live-server public</code><br><br>本番 →<code>live-server</code><br>・トランスパイル<br><code>npx webpack --env production</code><br>・Webサーバー起動<br><code>npx live-server public</code><br><br><code>webpack-dev-server</code><br>・トランスパイル&amp;Webサーバー起動（ファイル出力なし）<br><code>npx webpack serve --open --env development</code><br></p>',
    keyword: 'テスト,ブログ,test,blog,microcms,react,webpack',
    thumbnail: {
      url:
        'https://images.microcms-assets.io/assets/577bcb7965bf4dbd951686143646657b/d6b849e2ada74ce4a6ea91331bd4189d/cat_two.jpg',
      height: 533,
      width: 800,
    },
    description: 'Reactをwebpack経由で使用するための最小セットアップの実装例',
  },
  {
    id: 'kf9j-jzze',
    createdAt: '2021-05-14T15:35:45.078Z',
    updatedAt: '2021-05-14T15:36:22.022Z',
    publishedAt: '2021-05-14T15:36:22.022Z',
    revisedAt: '2021-05-14T15:36:22.022Z',
    title: 'Reactをwebpackでセットアップする。',
    body:
      '<h2 id="h098000ada2"><strong style="color:#bf9eee;background-color:#ffffff">setup</strong></h2><p><br></p><pre><code>❯ yarn init\nyarn init v1.22.10\nwarning ..&#x2F;package.json: No license field\nquestion name (react-blog-built-in-microCMS):\nquestion version (1.0.0):\nquestion description: microCMS\nquestion entry point (index.js): app.js\nquestion repository url (git@github.com:blackraccoon000&#x2F;react-blog-built-in-microCMS.git):\nquestion author (Yutaka Fujii &lt;yutakaf@playwell.site&gt;):\nquestion license (MIT): BSD 3-Clause License\nquestion private: public</code></pre><p><br></p><h3 id="h58ad52ed07"><strong style="color:#bf9eee">react</strong></h3><p><br>react 解釈に必要<br><br><code>yarn add react react-dom</code><br><code>yarn add @babel&#x2F;preset-react @babel&#x2F;preset-env</code><br></p><h3 id="h0123682dfe"><strong style="color:#bf9eee;background-color:#ffffff">webpack</strong></h3><p><br>webpack 経由で react をコンパイルするのに必要<br><br><code>yarn add webpack webpack-cli webpack-merge</code><br><code>yarn add html-webpack-plugin</code><br></p><h3 id="h55be5dbc4c"><strong style="color:#bf9eee;background-color:#ffffff">babel</strong></h3><p><br>ES6 などで追加された新規記法の解釈に必要<br><br><code>yarn add @babel&#x2F;core @babel&#x2F;plugin-proposal-class-properties @babel&#x2F;plugin-proposal-object-rest-spread</code><br></p><h3 id="ha1956e92b0"><strong style="color:#bf9eee">loader</strong></h3><p><br>webpack で babel や style などを解釈するのに必要<br><br><code>yarn add babel-loader style-loader sass sass-loader</code><br></p><h3 id="h70ce4fea77"><strong style="color:#bf9eee">plugin</strong></h3><p><br><code>yarn add babel-plugin-styled-components babel-plugin-transform-class-properties babel-plugin-transform-object-rest-spread</code><br></p><h3 id="h10aeb713eb"><strong style="color:#bf9eee">styled-component</strong></h3><p><br><code>yarn add styled-reset styled-components</code><br></p><h3 id="h86c20efef7"><strong style="color:#bf9eee">webpack.config.js</strong></h3><p><br>development と production で分岐するように webpack を生成<br></p><pre><code>webpack.config.js; &#x2F;&#x2F; 発生元\nwebpack.common.js; &#x2F;&#x2F; 共通\nwebpack.dev.js; &#x2F;&#x2F; 開発\nwebpack.prod.js; &#x2F;&#x2F; 本番</code></pre><p><br><code>path.join</code>から<code>path.resolve</code>へ変更したので、windows だと動かないかも？<br></p><h3 id="h13099e0679"><strong style="color:#bf9eee;background-color:#ffffff">.babelrc</strong></h3><p><br><code>corejs 3</code>で <code>plugins</code> を設定<br></p><h3 id="hee074fdd83"><strong style="color:#bf9eee">live-server</strong></h3><p><br><code>yarn -D live-server</code><br></p><h3 id="h29f3c629a7"><strong style="color:#bf9eee;background-color:#ffffff">src&#x2F;app.js</strong></h3><p><br></p><pre><code>import React from &#x27;react&#x27;;\nimport ReactDOM from &#x27;react-dom&#x27;;\n\nconst jsx = (\n  &lt;div&gt;\n    &lt;h1&gt;Hello World&lt;&#x2F;h1&gt;\n  &lt;&#x2F;div&gt;\n);\n\nReactDOM.render(jsx, document.getElementById(&#x27;app&#x27;));</code></pre><p><br></p><h3 id="h1d1f2f552d"><strong style="color:#bf9eee;background-color:#ffffff">環境作成テスト</strong></h3><p><br><code>app.js</code> を <code>public&#x2F;dist&#x2F;bundle.js</code> に変換<br><br>開発 →<code>live-server</code><br>・トランスパイル<br><code>npx webpack --env development</code><br>・Webサーバー起動<br><code>npx live-server public</code><br><br>本番 →<code>live-server</code><br>・トランスパイル<br><code>npx webpack --env production</code><br>・Webサーバー起動<br><code>npx live-server public</code><br><br><code>webpack-dev-server</code><br>・トランスパイル&amp;Webサーバー起動（ファイル出力なし）<br><code>npx webpack serve --open --env development</code><br></p>',
    keyword: 'テスト,ブログ,test,blog,microcms,react,webpack',
    thumbnail: {
      url:
        'https://images.microcms-assets.io/assets/577bcb7965bf4dbd951686143646657b/d6b849e2ada74ce4a6ea91331bd4189d/cat_two.jpg',
      height: 533,
      width: 800,
    },
    description: 'Reactをwebpack経由で使用するための最小セットアップの実装例',
  },
  {
    id: 'q0qtwov5f4q6',
    createdAt: '2021-05-14T15:35:39.587Z',
    updatedAt: '2021-05-14T15:36:29.376Z',
    publishedAt: '2021-05-14T15:36:29.376Z',
    revisedAt: '2021-05-14T15:36:29.376Z',
    title: 'ブログタイトル',
    body:
      '<h3 id="h3760426492">React.Component 内部の関数を props として受け渡す。</h3><pre><code>class IndecisionApp extends React.Component {\n constructor(props) {\n  super(props)\n  this.state = {\n   options: [&quot;Thing one&quot;,&quot;Thing two&quot;,&quot;Thing three&quot;,&quot;Thing four&quot;]\n  }\n }\n\n handleDeleteOptions() {\n  this.setState(()=&gt;{\n   return {\n    options:[]\n   }\n  })\n }\n\n render() {\n  const title = &quot;Indecision&quot;\n  const subtitle = &quot;Put your life in the hands of a computer&quot;\n\n  return (\n   &lt;div&gt;\n    &lt;Header title={title} subtitle={subtitle}&#x2F;&gt;\n    &lt;Action hasOptions={this.state.options.length &gt; 0}&#x2F;&gt;\n    &lt;Options\n     options={this.state.options}\n     handleDeleteOptions={this.handleDeleteOptions}\n    &#x2F;&gt;\n    &lt;AddOption &#x2F;&gt;\n   &lt;&#x2F;div&gt;\n  )\n }\n}</code></pre><p><br><img src="https://images.microcms-assets.io/assets/577bcb7965bf4dbd951686143646657b/5b78868648964ea1865d3ead616e320b/cat_one.jpg" alt><br><code>handleDeleteOptions()</code>を<code>  setState()</code> で作成した後、<code>render()</code>から<code>handleDeleteOptions={this.handleDeleteOptions}</code>として<code>&lt;Options&#x2F;&gt;</code>へ渡す。</p><pre><code>class Options extends React.Component {\n render() {\n  return (\n   &lt;div&gt;\n    &lt;button onClick={this.props.handleDeleteOptions}&gt;Remove All&lt;&#x2F;button&gt;\n    {this.props.options.map((option,index)=&gt;&lt;Option key={index} optionText={option}&#x2F;&gt;)}\n   &lt;&#x2F;div&gt;\n  )\n }\n}</code></pre><p><br><code>Options</code>では<code> props</code>を通して情報を受け取っているため、<code>{this.props.handleDeleteOptions}</code>となる。<br>しかし、このままだと、<code>this.state.options</code> が参照できないため、<code>IndecisionApp</code>内部の<code> constructor</code>で<code>this</code>を定義してやる。<br></p><pre><code>class IndecisionApp extends React.Component {\n constructor(props) {\n  super(props)\n  this.handleDeleteOptions = this.handleDeleteOptions.bind(this) &#x2F;&#x2F;ここ\n  this.state = {\n   options: [&quot;Thing one&quot;,&quot;Thing two&quot;,&quot;Thing three&quot;,&quot;Thing four&quot;]\n  }\n }\n handleDeleteOptions() {\n  this.setState(()=&gt;{\n   return {\n    options:[]\n   }\n  })\n }\n render() {\n  const title = &quot;Indecision&quot;\n  const subtitle = &quot;Put your life in the hands of a computer&quot;\n\n  return (\n   &lt;div&gt;\n    &lt;Header title={title} subtitle={subtitle}&#x2F;&gt;\n    &lt;Action hasOptions={this.state.options.length &gt; 0}&#x2F;&gt;\n    &lt;Options\n     options={this.state.options}\n     handleDeleteOptions={this.handleDeleteOptions}\n    &#x2F;&gt;\n    &lt;AddOption &#x2F;&gt;\n   &lt;&#x2F;div&gt;\n  )\n }\n}</code></pre>',
    keyword: 'テスト,ブログ,test,blog,microcms',
    thumbnail: {
      url:
        'https://images.microcms-assets.io/assets/577bcb7965bf4dbd951686143646657b/f717d13f8f5a4e61a6352823252bfba6/cat_three.jpg',
      height: 533,
      width: 800,
    },
    description: 'ブログ説明の概要を記入しています。',
  },
  {
    id: 'ww2vpab1815b',
    createdAt: '2021-05-14T15:35:36.040Z',
    updatedAt: '2021-05-14T15:36:35.417Z',
    publishedAt: '2021-05-14T15:36:35.417Z',
    revisedAt: '2021-05-14T15:36:35.417Z',
    title: 'ブログタイトル',
    body:
      '<h3 id="h3760426492">React.Component 内部の関数を props として受け渡す。</h3><pre><code>class IndecisionApp extends React.Component {\n constructor(props) {\n  super(props)\n  this.state = {\n   options: [&quot;Thing one&quot;,&quot;Thing two&quot;,&quot;Thing three&quot;,&quot;Thing four&quot;]\n  }\n }\n\n handleDeleteOptions() {\n  this.setState(()=&gt;{\n   return {\n    options:[]\n   }\n  })\n }\n\n render() {\n  const title = &quot;Indecision&quot;\n  const subtitle = &quot;Put your life in the hands of a computer&quot;\n\n  return (\n   &lt;div&gt;\n    &lt;Header title={title} subtitle={subtitle}&#x2F;&gt;\n    &lt;Action hasOptions={this.state.options.length &gt; 0}&#x2F;&gt;\n    &lt;Options\n     options={this.state.options}\n     handleDeleteOptions={this.handleDeleteOptions}\n    &#x2F;&gt;\n    &lt;AddOption &#x2F;&gt;\n   &lt;&#x2F;div&gt;\n  )\n }\n}</code></pre><p><br><img src="https://images.microcms-assets.io/assets/577bcb7965bf4dbd951686143646657b/5b78868648964ea1865d3ead616e320b/cat_one.jpg" alt><br><code>handleDeleteOptions()</code>を<code>  setState()</code> で作成した後、<code>render()</code>から<code>handleDeleteOptions={this.handleDeleteOptions}</code>として<code>&lt;Options&#x2F;&gt;</code>へ渡す。</p><pre><code>class Options extends React.Component {\n render() {\n  return (\n   &lt;div&gt;\n    &lt;button onClick={this.props.handleDeleteOptions}&gt;Remove All&lt;&#x2F;button&gt;\n    {this.props.options.map((option,index)=&gt;&lt;Option key={index} optionText={option}&#x2F;&gt;)}\n   &lt;&#x2F;div&gt;\n  )\n }\n}</code></pre><p><br><code>Options</code>では<code> props</code>を通して情報を受け取っているため、<code>{this.props.handleDeleteOptions}</code>となる。<br>しかし、このままだと、<code>this.state.options</code> が参照できないため、<code>IndecisionApp</code>内部の<code> constructor</code>で<code>this</code>を定義してやる。<br></p><pre><code>class IndecisionApp extends React.Component {\n constructor(props) {\n  super(props)\n  this.handleDeleteOptions = this.handleDeleteOptions.bind(this) &#x2F;&#x2F;ここ\n  this.state = {\n   options: [&quot;Thing one&quot;,&quot;Thing two&quot;,&quot;Thing three&quot;,&quot;Thing four&quot;]\n  }\n }\n handleDeleteOptions() {\n  this.setState(()=&gt;{\n   return {\n    options:[]\n   }\n  })\n }\n render() {\n  const title = &quot;Indecision&quot;\n  const subtitle = &quot;Put your life in the hands of a computer&quot;\n\n  return (\n   &lt;div&gt;\n    &lt;Header title={title} subtitle={subtitle}&#x2F;&gt;\n    &lt;Action hasOptions={this.state.options.length &gt; 0}&#x2F;&gt;\n    &lt;Options\n     options={this.state.options}\n     handleDeleteOptions={this.handleDeleteOptions}\n    &#x2F;&gt;\n    &lt;AddOption &#x2F;&gt;\n   &lt;&#x2F;div&gt;\n  )\n }\n}</code></pre>',
    keyword: 'テスト,ブログ,test,blog,microcms',
    thumbnail: {
      url:
        'https://images.microcms-assets.io/assets/577bcb7965bf4dbd951686143646657b/f717d13f8f5a4e61a6352823252bfba6/cat_three.jpg',
      height: 533,
      width: 800,
    },
    description: 'ブログ説明の概要を記入しています。',
  },
  {
    id: '8lvqc7pehr1q',
    createdAt: '2021-05-14T15:35:31.685Z',
    updatedAt: '2021-05-14T15:36:41.721Z',
    publishedAt: '2021-05-14T15:36:41.721Z',
    revisedAt: '2021-05-14T15:36:41.721Z',
    title: 'Reactをwebpackでセットアップする。',
    body:
      '<h2 id="h098000ada2"><strong style="color:#bf9eee;background-color:#ffffff">setup</strong></h2><p><br></p><pre><code>❯ yarn init\nyarn init v1.22.10\nwarning ..&#x2F;package.json: No license field\nquestion name (react-blog-built-in-microCMS):\nquestion version (1.0.0):\nquestion description: microCMS\nquestion entry point (index.js): app.js\nquestion repository url (git@github.com:blackraccoon000&#x2F;react-blog-built-in-microCMS.git):\nquestion author (Yutaka Fujii &lt;yutakaf@playwell.site&gt;):\nquestion license (MIT): BSD 3-Clause License\nquestion private: public</code></pre><p><br></p><h3 id="h58ad52ed07"><strong style="color:#bf9eee">react</strong></h3><p><br>react 解釈に必要<br><br><code>yarn add react react-dom</code><br><code>yarn add @babel&#x2F;preset-react @babel&#x2F;preset-env</code><br></p><h3 id="h0123682dfe"><strong style="color:#bf9eee;background-color:#ffffff">webpack</strong></h3><p><br>webpack 経由で react をコンパイルするのに必要<br><br><code>yarn add webpack webpack-cli webpack-merge</code><br><code>yarn add html-webpack-plugin</code><br></p><h3 id="h55be5dbc4c"><strong style="color:#bf9eee;background-color:#ffffff">babel</strong></h3><p><br>ES6 などで追加された新規記法の解釈に必要<br><br><code>yarn add @babel&#x2F;core @babel&#x2F;plugin-proposal-class-properties @babel&#x2F;plugin-proposal-object-rest-spread</code><br></p><h3 id="ha1956e92b0"><strong style="color:#bf9eee">loader</strong></h3><p><br>webpack で babel や style などを解釈するのに必要<br><br><code>yarn add babel-loader style-loader sass sass-loader</code><br></p><h3 id="h70ce4fea77"><strong style="color:#bf9eee">plugin</strong></h3><p><br><code>yarn add babel-plugin-styled-components babel-plugin-transform-class-properties babel-plugin-transform-object-rest-spread</code><br></p><h3 id="h10aeb713eb"><strong style="color:#bf9eee">styled-component</strong></h3><p><br><code>yarn add styled-reset styled-components</code><br></p><h3 id="h86c20efef7"><strong style="color:#bf9eee">webpack.config.js</strong></h3><p><br>development と production で分岐するように webpack を生成<br></p><pre><code>webpack.config.js; &#x2F;&#x2F; 発生元\nwebpack.common.js; &#x2F;&#x2F; 共通\nwebpack.dev.js; &#x2F;&#x2F; 開発\nwebpack.prod.js; &#x2F;&#x2F; 本番</code></pre><p><br><code>path.join</code>から<code>path.resolve</code>へ変更したので、windows だと動かないかも？<br></p><h3 id="h13099e0679"><strong style="color:#bf9eee;background-color:#ffffff">.babelrc</strong></h3><p><br><code>corejs 3</code>で <code>plugins</code> を設定<br></p><h3 id="hee074fdd83"><strong style="color:#bf9eee">live-server</strong></h3><p><br><code>yarn -D live-server</code><br></p><h3 id="h29f3c629a7"><strong style="color:#bf9eee;background-color:#ffffff">src&#x2F;app.js</strong></h3><p><br></p><pre><code>import React from &#x27;react&#x27;;\nimport ReactDOM from &#x27;react-dom&#x27;;\n\nconst jsx = (\n  &lt;div&gt;\n    &lt;h1&gt;Hello World&lt;&#x2F;h1&gt;\n  &lt;&#x2F;div&gt;\n);\n\nReactDOM.render(jsx, document.getElementById(&#x27;app&#x27;));</code></pre><p><br></p><h3 id="h1d1f2f552d"><strong style="color:#bf9eee;background-color:#ffffff">環境作成テスト</strong></h3><p><br><code>app.js</code> を <code>public&#x2F;dist&#x2F;bundle.js</code> に変換<br><br>開発 →<code>live-server</code><br>・トランスパイル<br><code>npx webpack --env development</code><br>・Webサーバー起動<br><code>npx live-server public</code><br><br>本番 →<code>live-server</code><br>・トランスパイル<br><code>npx webpack --env production</code><br>・Webサーバー起動<br><code>npx live-server public</code><br><br><code>webpack-dev-server</code><br>・トランスパイル&amp;Webサーバー起動（ファイル出力なし）<br><code>npx webpack serve --open --env development</code><br></p>',
    keyword: 'テスト,ブログ,test,blog,microcms,react,webpack',
    thumbnail: {
      url:
        'https://images.microcms-assets.io/assets/577bcb7965bf4dbd951686143646657b/d6b849e2ada74ce4a6ea91331bd4189d/cat_two.jpg',
      height: 533,
      width: 800,
    },
    description: 'Reactをwebpack経由で使用するための最小セットアップの実装例',
  },
  {
    id: 'asc_9w4_fxl',
    createdAt: '2021-05-14T15:35:24.212Z',
    updatedAt: '2021-05-14T15:36:47.581Z',
    publishedAt: '2021-05-14T15:36:47.581Z',
    revisedAt: '2021-05-14T15:36:47.581Z',
    title: 'webpackを活用したfaviconの設定',
    body:
      '<h2 id="ha12a61f0e2"><strong style="color:#bf9eee">Favicon の作成</strong></h2><p><br></p><pre><code>&#x2F;&#x2F; webpack&#x2F;webpack.common.js\nplugins: [\n  new HtmlWebpackPlugin({\n    title: &#x27;Custom template using Handlebars&#x27;,\n    &#x2F;&#x2F;生成する HTML ファイル\n    filename: path.resolve(__dirname, &#x27;..&#x2F;public&#x2F;index.html&#x27;),\n    hash: true,\n    &#x2F;&#x2F; テンプレートで使用するファイルのパスを指定\n    template: path.resolve(__dirname, &#x27;..&#x2F;src&#x2F;template&#x2F;index.html&#x27;),\n    favicon: path.resolve(__dirname, &#x27;..&#x2F;src&#x2F;favicons&#x2F;favicon.ico&#x27;),\n    &#x2F;&#x2F; テンプレートで使用する変数 h1 を設定\n    &#x2F;&#x2F; h1: &#x27;Heading Title H1&#x27;,\n  }),\n],</code></pre><p><br>上記のように設定し、<br><code>yarn build:dev</code> → <code>yarn live-server</code>と実施すると、icon が表示され、<br><code>public&#x2F;index.html</code> に下記が追記される。<br><br></p><pre><code>&lt;link rel=&quot;icon&quot; href=&quot;dist&#x2F;favicon.ico?e9d7eedba7ac082e8bb7&quot; &#x2F;&gt;</code></pre><p><br></p><pre><code>&lt;link rel=&quot;icon&quot; href=&quot;dist&#x2F;playwell-icon-260_260.svg?e9d7eedba7ac082e8bb7&quot; &#x2F;&gt;</code></pre><p><br><br>このままだと、いろいろな分岐ができないた<br><code>yarn add favicons favicons-webpack-plugin</code>を追加する。<br><br>基本的には<a style="color:#f286c4" href="https://github.com/jantimon/html-webpack-plugin" target="_blank" rel="noopener noreferrer">HtmlWebpackPlugin</a>で index.html を出力する過程で、<br><a style="color:#f286c4" href="https://github.com/jantimon/favicons-webpack-plugin" target="_blank" rel="noopener noreferrer">favicons-webpack-plugin</a>を利用し、index.html に作製された favicons の情報を追加する。<br>詳細に内容を設定する場合には、<a style="color:#f286c4" href="https://github.com/itgalaxy/favicons#usage" target="_blank" rel="noopener noreferrer">favicons</a>を参考にすると良い。<br></p><pre><code>  plugins: [\n    new HtmlWebpackPlugin({\n      title: &#x27;Custom template using Handlebars&#x27;,\n      filename: path.resolve(__dirname, &#x27;..&#x2F;public&#x2F;index.html&#x27;),\n      hash: true,\n      template: path.resolve(__dirname, &#x27;..&#x2F;src&#x2F;template&#x2F;index.html&#x27;),\n    }),\n    new FaviconsWebpackPlugin({\n      logo: path.resolve(\n        __dirname,\n        &#x27;..&#x2F;src&#x2F;favicons&#x2F;playwell-icon-260_260_2.png&#x27;\n      ),\n      cache: true,\n      mode: &#x27;webapp&#x27;,\n      devMode: &#x27;light&#x27;,\n      version: &#x27;1.0&#x27;,\n      favicons: {\n        appName: &#x27;react-blog-built-in-microCMS&#x27;,\n        appDescription: &#x27;React with built in microCMS&#x27;,\n        developerName: &#x27;Yutaka Fujii&#x27;,\n        developerURL:\n          &#x27;git@github.com:blackraccoon000&#x2F;react-blog-built-in-microCMS.git&#x27;,\n        icons: {\n          coast: false,\n          yandex: false,\n        },\n      },\n      inject: (htmlPlugin) =&gt;\n        basename(htmlPlugin.options.filename) === &#x27;index.html&#x27;,\n    }),\n  ],</code></pre><p><br>参考<br><a style="color:#f286c4" href="https://malicia.hatenablog.com/entry/2018/12/23/004206" target="_blank" rel="noopener noreferrer">webpack で html と favicon も一緒に bundle する</a><br></p>',
    keyword:
      'テスト,ブログ,test,blog,microcms,react,FaviconsWebpackPlugin,HtmlWebpackPlugin',
    thumbnail: {
      url:
        'https://images.microcms-assets.io/assets/577bcb7965bf4dbd951686143646657b/2687c64d1e7e4a8b8fef792ff909ea81/cat_four.jpg',
      height: 450,
      width: 800,
    },
    description: 'webpackのプラグインを活用したfaviconの設定。',
  },
  {
    id: '7odtdk62l',
    createdAt: '2021-05-11T07:29:49.781Z',
    updatedAt: '2021-05-13T06:20:29.613Z',
    publishedAt: '2021-05-11T07:29:49.781Z',
    revisedAt: '2021-05-13T06:20:29.613Z',
    title: 'webpackを活用したfaviconの設定',
    body:
      '<h2 id="ha12a61f0e2"><strong style="color:#bf9eee">Favicon の作成</strong></h2><p><br></p><pre><code>&#x2F;&#x2F; webpack&#x2F;webpack.common.js\nplugins: [\n  new HtmlWebpackPlugin({\n    title: &#x27;Custom template using Handlebars&#x27;,\n    &#x2F;&#x2F;生成する HTML ファイル\n    filename: path.resolve(__dirname, &#x27;..&#x2F;public&#x2F;index.html&#x27;),\n    hash: true,\n    &#x2F;&#x2F; テンプレートで使用するファイルのパスを指定\n    template: path.resolve(__dirname, &#x27;..&#x2F;src&#x2F;template&#x2F;index.html&#x27;),\n    favicon: path.resolve(__dirname, &#x27;..&#x2F;src&#x2F;favicons&#x2F;favicon.ico&#x27;),\n    &#x2F;&#x2F; テンプレートで使用する変数 h1 を設定\n    &#x2F;&#x2F; h1: &#x27;Heading Title H1&#x27;,\n  }),\n],</code></pre><p><br>上記のように設定し、<br><code>yarn build:dev</code> → <code>yarn live-server</code>と実施すると、icon が表示され、<br><code>public&#x2F;index.html</code> に下記が追記される。<br><br></p><pre><code>&lt;link rel=&quot;icon&quot; href=&quot;dist&#x2F;favicon.ico?e9d7eedba7ac082e8bb7&quot; &#x2F;&gt;</code></pre><p><br></p><pre><code>&lt;link rel=&quot;icon&quot; href=&quot;dist&#x2F;playwell-icon-260_260.svg?e9d7eedba7ac082e8bb7&quot; &#x2F;&gt;</code></pre><p><br><br>このままだと、いろいろな分岐ができないた<br><code>yarn add favicons favicons-webpack-plugin</code>を追加する。<br><br>基本的には<a style="color:#f286c4" href="https://github.com/jantimon/html-webpack-plugin" target="_blank" rel="noopener noreferrer">HtmlWebpackPlugin</a>で index.html を出力する過程で、<br><a style="color:#f286c4" href="https://github.com/jantimon/favicons-webpack-plugin" target="_blank" rel="noopener noreferrer">favicons-webpack-plugin</a>を利用し、index.html に作製された favicons の情報を追加する。<br>詳細に内容を設定する場合には、<a style="color:#f286c4" href="https://github.com/itgalaxy/favicons#usage" target="_blank" rel="noopener noreferrer">favicons</a>を参考にすると良い。<br></p><pre><code>  plugins: [\n    new HtmlWebpackPlugin({\n      title: &#x27;Custom template using Handlebars&#x27;,\n      filename: path.resolve(__dirname, &#x27;..&#x2F;public&#x2F;index.html&#x27;),\n      hash: true,\n      template: path.resolve(__dirname, &#x27;..&#x2F;src&#x2F;template&#x2F;index.html&#x27;),\n    }),\n    new FaviconsWebpackPlugin({\n      logo: path.resolve(\n        __dirname,\n        &#x27;..&#x2F;src&#x2F;favicons&#x2F;playwell-icon-260_260_2.png&#x27;\n      ),\n      cache: true,\n      mode: &#x27;webapp&#x27;,\n      devMode: &#x27;light&#x27;,\n      version: &#x27;1.0&#x27;,\n      favicons: {\n        appName: &#x27;react-blog-built-in-microCMS&#x27;,\n        appDescription: &#x27;React with built in microCMS&#x27;,\n        developerName: &#x27;Yutaka Fujii&#x27;,\n        developerURL:\n          &#x27;git@github.com:blackraccoon000&#x2F;react-blog-built-in-microCMS.git&#x27;,\n        icons: {\n          coast: false,\n          yandex: false,\n        },\n      },\n      inject: (htmlPlugin) =&gt;\n        basename(htmlPlugin.options.filename) === &#x27;index.html&#x27;,\n    }),\n  ],</code></pre><p><br>参考<br><a style="color:#f286c4" href="https://malicia.hatenablog.com/entry/2018/12/23/004206" target="_blank" rel="noopener noreferrer">webpack で html と favicon も一緒に bundle する</a><br></p>',
    keyword:
      'テスト,ブログ,test,blog,microcms,react,FaviconsWebpackPlugin,HtmlWebpackPlugin',
    thumbnail: {
      url:
        'https://images.microcms-assets.io/assets/577bcb7965bf4dbd951686143646657b/2687c64d1e7e4a8b8fef792ff909ea81/cat_four.jpg',
      height: 450,
      width: 800,
    },
    description: 'webpackのプラグインを活用したfaviconの設定。',
  },
  {
    id: 'vn-81ad1p',
    createdAt: '2021-05-11T07:27:25.579Z',
    updatedAt: '2021-05-13T06:28:45.649Z',
    publishedAt: '2021-05-11T07:27:25.579Z',
    revisedAt: '2021-05-13T06:28:45.649Z',
    title: 'Reactをwebpackでセットアップする。',
    body:
      '<h2 id="h098000ada2"><strong style="color:#bf9eee;background-color:#ffffff">setup</strong></h2><p><br></p><pre><code>❯ yarn init\nyarn init v1.22.10\nwarning ..&#x2F;package.json: No license field\nquestion name (react-blog-built-in-microCMS):\nquestion version (1.0.0):\nquestion description: microCMS\nquestion entry point (index.js): app.js\nquestion repository url (git@github.com:blackraccoon000&#x2F;react-blog-built-in-microCMS.git):\nquestion author (Yutaka Fujii &lt;yutakaf@playwell.site&gt;):\nquestion license (MIT): BSD 3-Clause License\nquestion private: public</code></pre><p><br></p><h3 id="h58ad52ed07"><strong style="color:#bf9eee">react</strong></h3><p><br>react 解釈に必要<br><br><code>yarn add react react-dom</code><br><code>yarn add @babel&#x2F;preset-react @babel&#x2F;preset-env</code><br></p><h3 id="h0123682dfe"><strong style="color:#bf9eee;background-color:#ffffff">webpack</strong></h3><p><br>webpack 経由で react をコンパイルするのに必要<br><br><code>yarn add webpack webpack-cli webpack-merge</code><br><code>yarn add html-webpack-plugin</code><br></p><h3 id="h55be5dbc4c"><strong style="color:#bf9eee;background-color:#ffffff">babel</strong></h3><p><br>ES6 などで追加された新規記法の解釈に必要<br><br><code>yarn add @babel&#x2F;core @babel&#x2F;plugin-proposal-class-properties @babel&#x2F;plugin-proposal-object-rest-spread</code><br></p><h3 id="ha1956e92b0"><strong style="color:#bf9eee">loader</strong></h3><p><br>webpack で babel や style などを解釈するのに必要<br><br><code>yarn add babel-loader style-loader sass sass-loader</code><br></p><h3 id="h70ce4fea77"><strong style="color:#bf9eee">plugin</strong></h3><p><br><code>yarn add babel-plugin-styled-components babel-plugin-transform-class-properties babel-plugin-transform-object-rest-spread</code><br></p><h3 id="h10aeb713eb"><strong style="color:#bf9eee">styled-component</strong></h3><p><br><code>yarn add styled-reset styled-components</code><br></p><h3 id="h86c20efef7"><strong style="color:#bf9eee">webpack.config.js</strong></h3><p><br>development と production で分岐するように webpack を生成<br></p><pre><code>webpack.config.js; &#x2F;&#x2F; 発生元\nwebpack.common.js; &#x2F;&#x2F; 共通\nwebpack.dev.js; &#x2F;&#x2F; 開発\nwebpack.prod.js; &#x2F;&#x2F; 本番</code></pre><p><br><code>path.join</code>から<code>path.resolve</code>へ変更したので、windows だと動かないかも？<br></p><h3 id="h13099e0679"><strong style="color:#bf9eee;background-color:#ffffff">.babelrc</strong></h3><p><br><code>corejs 3</code>で <code>plugins</code> を設定<br></p><h3 id="hee074fdd83"><strong style="color:#bf9eee">live-server</strong></h3><p><br><code>yarn -D live-server</code><br></p><h3 id="h29f3c629a7"><strong style="color:#bf9eee;background-color:#ffffff">src&#x2F;app.js</strong></h3><p><br></p><pre><code>import React from &#x27;react&#x27;;\nimport ReactDOM from &#x27;react-dom&#x27;;\n\nconst jsx = (\n  &lt;div&gt;\n    &lt;h1&gt;Hello World&lt;&#x2F;h1&gt;\n  &lt;&#x2F;div&gt;\n);\n\nReactDOM.render(jsx, document.getElementById(&#x27;app&#x27;));</code></pre><p><br></p><h3 id="h1d1f2f552d"><strong style="color:#bf9eee;background-color:#ffffff">環境作成テスト</strong></h3><p><br><code>app.js</code> を <code>public&#x2F;dist&#x2F;bundle.js</code> に変換<br><br>開発 →<code>live-server</code><br>・トランスパイル<br><code>npx webpack --env development</code><br>・Webサーバー起動<br><code>npx live-server public</code><br><br>本番 →<code>live-server</code><br>・トランスパイル<br><code>npx webpack --env production</code><br>・Webサーバー起動<br><code>npx live-server public</code><br><br><code>webpack-dev-server</code><br>・トランスパイル&amp;Webサーバー起動（ファイル出力なし）<br><code>npx webpack serve --open --env development</code><br></p>',
    keyword: 'テスト,ブログ,test,blog,microcms,react,webpack',
    thumbnail: {
      url:
        'https://images.microcms-assets.io/assets/577bcb7965bf4dbd951686143646657b/d6b849e2ada74ce4a6ea91331bd4189d/cat_two.jpg',
      height: 533,
      width: 800,
    },
    description: 'Reactをwebpack経由で使用するための最小セットアップの実装例',
  },
  {
    id: 'mxq-0f4nq',
    createdAt: '2021-05-02T07:38:52.010Z',
    updatedAt: '2021-05-08T02:50:30.478Z',
    publishedAt: '2021-05-02T07:38:52.010Z',
    revisedAt: '2021-05-08T02:50:30.478Z',
    title: 'ブログタイトル',
    body:
      '<h3 id="h3760426492">React.Component 内部の関数を props として受け渡す。</h3><pre><code>class IndecisionApp extends React.Component {\n constructor(props) {\n  super(props)\n  this.state = {\n   options: [&quot;Thing one&quot;,&quot;Thing two&quot;,&quot;Thing three&quot;,&quot;Thing four&quot;]\n  }\n }\n\n handleDeleteOptions() {\n  this.setState(()=&gt;{\n   return {\n    options:[]\n   }\n  })\n }\n\n render() {\n  const title = &quot;Indecision&quot;\n  const subtitle = &quot;Put your life in the hands of a computer&quot;\n\n  return (\n   &lt;div&gt;\n    &lt;Header title={title} subtitle={subtitle}&#x2F;&gt;\n    &lt;Action hasOptions={this.state.options.length &gt; 0}&#x2F;&gt;\n    &lt;Options\n     options={this.state.options}\n     handleDeleteOptions={this.handleDeleteOptions}\n    &#x2F;&gt;\n    &lt;AddOption &#x2F;&gt;\n   &lt;&#x2F;div&gt;\n  )\n }\n}</code></pre><p><br><img src="https://images.microcms-assets.io/assets/577bcb7965bf4dbd951686143646657b/5b78868648964ea1865d3ead616e320b/cat_one.jpg" alt><br><code>handleDeleteOptions()</code>を<code>  setState()</code> で作成した後、<code>render()</code>から<code>handleDeleteOptions={this.handleDeleteOptions}</code>として<code>&lt;Options&#x2F;&gt;</code>へ渡す。</p><pre><code>class Options extends React.Component {\n render() {\n  return (\n   &lt;div&gt;\n    &lt;button onClick={this.props.handleDeleteOptions}&gt;Remove All&lt;&#x2F;button&gt;\n    {this.props.options.map((option,index)=&gt;&lt;Option key={index} optionText={option}&#x2F;&gt;)}\n   &lt;&#x2F;div&gt;\n  )\n }\n}</code></pre><p><br><code>Options</code>では<code> props</code>を通して情報を受け取っているため、<code>{this.props.handleDeleteOptions}</code>となる。<br>しかし、このままだと、<code>this.state.options</code> が参照できないため、<code>IndecisionApp</code>内部の<code> constructor</code>で<code>this</code>を定義してやる。<br></p><pre><code>class IndecisionApp extends React.Component {\n constructor(props) {\n  super(props)\n  this.handleDeleteOptions = this.handleDeleteOptions.bind(this) &#x2F;&#x2F;ここ\n  this.state = {\n   options: [&quot;Thing one&quot;,&quot;Thing two&quot;,&quot;Thing three&quot;,&quot;Thing four&quot;]\n  }\n }\n handleDeleteOptions() {\n  this.setState(()=&gt;{\n   return {\n    options:[]\n   }\n  })\n }\n render() {\n  const title = &quot;Indecision&quot;\n  const subtitle = &quot;Put your life in the hands of a computer&quot;\n\n  return (\n   &lt;div&gt;\n    &lt;Header title={title} subtitle={subtitle}&#x2F;&gt;\n    &lt;Action hasOptions={this.state.options.length &gt; 0}&#x2F;&gt;\n    &lt;Options\n     options={this.state.options}\n     handleDeleteOptions={this.handleDeleteOptions}\n    &#x2F;&gt;\n    &lt;AddOption &#x2F;&gt;\n   &lt;&#x2F;div&gt;\n  )\n }\n}</code></pre>',
    keyword: 'テスト,ブログ,test,blog,microcms',
    thumbnail: {
      url:
        'https://images.microcms-assets.io/assets/577bcb7965bf4dbd951686143646657b/f717d13f8f5a4e61a6352823252bfba6/cat_three.jpg',
      height: 533,
      width: 800,
    },
    description: 'ブログ説明の概要を記入しています。',
  },
];

export default pages;
